{"version":3,"sources":["Components/APICustom/CustomFETCH.js","Components/WeatherShowcase/WeatherSearch.js","Components/WeatherShowcase/WeatherIcon.js","Components/WeatherShowcase/WeatherDisplay.js","Components/WeatherShowcase/WeatherShowcase.js","App.js","reportWebVitals.js","index.js"],"names":["HTTP","city","this","apiKey","a","fetch","response","ok","message","status","Error","json","resData","WeatherSearch","props","useState","cityName","setCityName","inputValue","setInputValue","className","value","onChange","event","target","type","placeholder","onClick","getCity","WeatherIcon","desc","src","WeatherDisplay","weatherData","data","console","log","length","weather","temp","Number","parseFloat","main","toFixed","feelsLike","feels_like","tempMin","temp_min","tempMax","temp_max","humidity","class","WeatherShowcase","setWeatherData","http","get","then","list","catch","err","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c85f95b.chunk.js","sourcesContent":["class HTTP {\r\n\r\n    constructor(city) {\r\n        this.apiKey = \"3139f1fc234b0ae75f0a6f92b8007c26\";\r\n        this.city = city;\r\n    }\r\n\r\n    // api.openweathermap.org/data/2.5/forecast?q=Hyderabad&appid=75e2d0eba9eb8bcb6b3f46a63434cebb\r\n\r\n    // GET\r\n    async get() {\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.city}&appid=${this.apiKey}`);\r\n\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n\r\n        const resData = await response.json();\r\n        return resData;\r\n    }\r\n}\r\n\r\nexport default HTTP;","import './WeatherSearch.css'; \r\n\r\nimport { useState } from \"react\";\r\n\r\nconst WeatherSearch = props => {\r\n\r\n    const [cityName, setCityName] = useState('')\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const enteredCityHandler = event => {\r\n        setCityName(event.target.value);\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    const searchHandler = () => {\r\n        props.getCity(cityName);\r\n        setInputValue('')\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"weather-search\">\r\n            <div className=\"weather-search__bar\">\r\n                <input className=\"weather-search__input\" value={inputValue} onChange={enteredCityHandler} type=\"text\" placeholder=\"Search for city\" />\r\n                <i onClick={searchHandler} className=\"fas fa-search weather-search__btn\"></i>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherSearch;","import './WeatherIcon.css';\r\n\r\nconst WeatherIcon = props => {\r\n\r\n    if (props.desc === \"ThunderStorm\") {\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <p>ThunderStorm</p>\r\n                <img src=\"http://openweathermap.org/img/wn/11n@2x.png\"></img>\r\n            </div>\r\n        )\r\n    } else if (props.desc === \"Drizzle\") {\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <p>ThunderStorm</p>\r\n                <img src=\"http://openweathermap.org/img/wn/09n@2x.png\"></img>\r\n            </div>\r\n        )\r\n    } else if (props.desc === \"Rain\") {\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <p>Rain</p>\r\n                <img src=\"http://openweathermap.org/img/wn/10n@2x.png\"></img>\r\n            </div>\r\n        )\r\n    } else if (props.desc === \"Snow\") {\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <p>Snow</p>\r\n                <img src=\"http://openweathermap.org/img/wn/13n@2x.png\"></img>\r\n            </div>\r\n        )\r\n    } else if (props.desc === \"Mist\" || props.desc === \"Smoke\" || props.desc === \"Haze\" || props.desc === \"Dust\" || props.desc === \"Fog\" || props.desc === \"Sand\" || props.desc === \"Ash\" || props.desc === \"Squall\" || props.desc === \"Tornado\") {\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <p>Dust</p>\r\n                <img src=\"http://openweathermap.org/img/wn/50n@2x.png\"></img>\r\n            </div>\r\n        )\r\n    } else if (props.desc === \"Clear\") {\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <p>Clear</p>\r\n                <img src=\"http://openweathermap.org/img/wn/01n@2x.png\"></img>\r\n            </div>\r\n        )\r\n    } else if (props.desc === \"Clouds\") {\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <p>Clouds</p>\r\n                <img src=\"http://openweathermap.org/img/wn/02n@2x.png\"></img>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default WeatherIcon;","import './WeatherDisplay.css';\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nconst WeatherDisplay = props => {\r\n\r\n    const weatherData = props.data;\r\n    console.log(weatherData);\r\n    if (weatherData.length === 0) {\r\n\r\n        return (\r\n            <div className=\"weather-display\">\r\n                <h3>Nothing to show :(</h3>\r\n            </div>\r\n        )\r\n\r\n    } else {\r\n        const weather = {\r\n            temp: Number.parseFloat(weatherData[0].main.temp - 273).toFixed(1),\r\n            feelsLike: Number.parseFloat(weatherData[0].main.feels_like - 273).toFixed(1),\r\n            tempMin: Number.parseFloat(weatherData[0].main.temp_min - 273).toFixed(1),\r\n            tempMax: Number.parseFloat(weatherData[0].main.temp_max - 273).toFixed(1),\r\n            humidity: weatherData[0].main.humidity,\r\n            desc: weatherData[0].weather[0].main\r\n        }\r\n\r\n        console.log(weather);\r\n\r\n        return (\r\n            <div className=\"weather-display\">\r\n                <div className=\"weather-display__main\">\r\n\r\n                    <WeatherIcon desc={weather.desc} />\r\n\r\n                    <div className=\"weather-display__city\">\r\n                    <i class=\"fas fa-map-marker-alt\"></i>\r\n                        <p className=\"weather-display__city\">{props.city}</p>\r\n                    </div>\r\n\r\n                    <h1>{weather.temp} 째C</h1>\r\n                    <p>Feels Like {weather.feelsLike} 째C</p>\r\n                </div>\r\n\r\n                <div className=\"weather-display__details\">\r\n                    <h3>More Details</h3>\r\n\r\n                    <ul className=\"weather-display__list\">\r\n                        <li>Max Temperature - {weather.tempMax} 째C</li>\r\n                        <li>Min Temperature - {weather.tempMin} 째C</li>\r\n                        <li>Humidity - {weather.humidity} %</li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default WeatherDisplay;","import './WeatherShowcase.css';\r\n\r\nimport { useState } from \"react\";\r\n\r\nimport HTTP from \"../APICustom/CustomFETCH\";\r\nimport WeatherSearch from \"./WeatherSearch\";\r\nimport WeatherDisplay from \"./WeatherDisplay\";\r\n\r\nconst WeatherShowcase = () => {\r\n\r\n    const [weatherData, setWeatherData] = useState([])\r\n    const [cityName, setCityName] = useState('');\r\n\r\n    const onGetCity = city => {\r\n        const http = new HTTP(city);\r\n        setCityName(city);\r\n        http.get()\r\n            .then(data => {\r\n                setWeatherData(data.list)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setWeatherData([]);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather-showcase\">\r\n            <WeatherSearch getCity={onGetCity} />\r\n            <WeatherDisplay data={weatherData} city={cityName} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherShowcase;","import './App.css';\nimport WeatherShowcase from './Components/WeatherShowcase/WeatherShowcase';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <WeatherShowcase />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}